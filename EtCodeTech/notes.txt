Daftar Asset yang Dibutuhkan
1.Sprites:
1.1.dino.png: Sprite Dino dalam posisi berlari.
1.2.dino_duck.png: Sprite Dino merunduk.
1.3.cactus.png: Gambar kaktus (bervariasi: kecil, besar, kelompok).
1.4.ground.png: Texture tanah untuk efek scrolling.
1.5.cloud.png: Sprite awan untuk latar belakang.

2.Sound Effects:
2.1.jump.wav: Suara saat Dino melompat.
2.2.game_over.wav: Suara saat terjadi tabrakan.

3.Font:
3.1.File font (e.g., pixel_font.ttf) untuk menampilkan skor.

Catatan Implementasi
1.Gravitasi dan Lompatan:
1.1.Gunakan persamaan gerak velocity += gravity untuk simulasi lompatan realistis.
1.2.Batasi posisi Dino agar tidak jatuh di bawah ground (dino_y >= 300).
2.Spawn Obstacle:
2.1.Gunakan probabilitas acak (e.g., 2% per frame) untuk spawn obstacle.
3.Collision Detection:
3.1.Gunakan pygame.Rect.colliderect() untuk deteksi tabrakan sederhana.
4.Scrolling Ground:
4.1.Gerakkan texture ground ke kiri, lalu reset posisinya setelah mencapai batas layar.
5.Peningkatan Kesulitan:
5.1.Tingkatkan kecepatan (speed) berdasarkan skor (e.g., +0.1 setiap 100 poin).

Algoritma Utama
1.Inisialisasi Game
1.1.Buat window game dengan resolusi tertentu (e.g., 800x400).
1.2.Muat asset: sprite Dino, cactus, ground, cloud, dan sound effects.
1.3.Inisialisasi variabel: score, speed, gravity, dan status game (berjalan/berhenti).

2.Game Loop
2.1.Input Handling:
2.1.1.Deteksi tombol SPACE untuk lompat.
2.1.2.Deteksi tombol panah bawah untuk merunduk.
2.1.3.Deteksi tombol ESC untuk keluar.

2.2.Update Game State:
2.2.1.Update posisi Dino dengan gravitasi.
2.2.2.Gerakkan obstacle (cactus) dan ground.
2.2.3.Spawn obstacle secara acak.
2.2.4.Update skor dan tingkat kecepatan.

2.3.Collision Detection:
2.3.1.Cek tabrakan antara Dino dan obstacle.

2.4.Render:
2.4.1.Gambar latar, ground, Dino, obstacle, dan skor.
2.4.2.Jika game over, tampilkan pesan "Game Over".


Pseudo Code:
IMPORT pygame
INITIALIZE pygame

# Inisialisasi Variabel
screen = CREATE_WINDOW(800, 400)
clock = CREATE_CLOCK()
dino = LOAD_SPRITE("dino.png")
cactus = LOAD_SPRITE("cactus.png")
ground = LOAD_SPRITE("ground.png")
FPS = 60
gravity = 0.5
dino_y = 300
dino_velocity = 0
obstacles = []
score = 0
game_active = True

WHILE True:
    # Event Handling
    FOR event IN pygame.event.get():
        IF event.type == QUIT:
            EXIT
        IF event.type == KEYDOWN:
            IF event.key == K_SPACE AND game_active:
                dino_velocity = -12  # Lompat
            IF event.key == K_DOWN:
                dino = LOAD_SPRITE("dino_duck.png")  # Merunduk

    # Update Game State
    IF game_active:
        # Update Posisi Dino
        dino_y += dino_velocity
        dino_velocity += gravity
        IF dino_y >= 300:  # Batasi di ground
            dino_y = 300
            dino_velocity = 0

        # Spawn Obstacle
        IF RANDOM() < 0.02:
            ADD obstacles(cactus)

        # Gerakkan Obstacle & Ground
        FOR obstacle IN obstacles:
            obstacle.x -= speed
            IF obstacle.x < -50:
                REMOVE obstacle
        ground_scroll -= speed

        # Update Skor & Speed
        score += 1
        speed = 5 + score // 100

        # Collision Detection
        IF CHECK_COLLISION(dino, obstacles):
            game_active = False

    # Render
    DRAW_BACKGROUND()
    DRAW_GROUND(ground_scroll)
    DRAW_DINO(dino, dino_y)
    DRAW_OBSTACLES(obstacles)
    DRAW_SCORE(score)

    IF NOT game_active:
        DRAW_TEXT("GAME OVER", (400, 200))

    UPDATE_DISPLAY()
    clock.tick(FPS)